// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wNxtZcFa8F4mXc5wMcFAw1
// Component: ZZYuD1kwGj
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Pause from "../../Pause"; // plasmic-import: -s6EJFyC7E/component
import XButton3 from "../../XButton3"; // plasmic-import: MIo-gqCJB6/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_fidenti.module.css"; // plasmic-import: wNxtZcFa8F4mXc5wMcFAw1/projectcss
import * as sty from "./PlasmicRecording.module.css"; // plasmic-import: ZZYuD1kwGj/css

export type PlasmicRecording__VariantMembers = {};

export type PlasmicRecording__VariantsArgs = {};
type VariantPropType = keyof PlasmicRecording__VariantsArgs;
export const PlasmicRecording__VariantProps = new Array<VariantPropType>();

export type PlasmicRecording__ArgsType = {};
type ArgPropType = keyof PlasmicRecording__ArgsType;
export const PlasmicRecording__ArgProps = new Array<ArgPropType>();

export type PlasmicRecording__OverridesType = {
  root?: p.Flex<"div">;
  pause?: p.Flex<typeof Pause>;
  xButton3?: p.Flex<typeof XButton3>;
};

export interface DefaultRecordingProps {
  className?: string;
}

function PlasmicRecording__RenderFunc(props: {
  variants: PlasmicRecording__VariantsArgs;
  args: PlasmicRecording__ArgsType;
  overrides: PlasmicRecording__OverridesType;
  dataFetches?: PlasmicRecording__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.box___1ADqY)}>
            <div className={classNames(defaultcss.all, sty.box__o99Us)}>
              <Pause
                data-plasmic-name={"pause"}
                data-plasmic-override={overrides.pause}
                className={classNames("__wab_instance", sty.pause)}
              />

              <XButton3
                data-plasmic-name={"xButton3"}
                data-plasmic-override={overrides.xButton3}
                className={classNames("__wab_instance", sty.xButton3)}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pause", "xButton3"],
  pause: ["pause"],
  xButton3: ["xButton3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  pause: typeof Pause;
  xButton3: typeof XButton3;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRecording__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRecording__VariantsArgs;
    args?: PlasmicRecording__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicRecording__Fetches;
  } & Omit<PlasmicRecording__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRecording__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRecording__ArgProps,
      internalVariantPropNames: PlasmicRecording__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicRecording__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRecording";
  } else {
    func.displayName = `PlasmicRecording.${nodeName}`;
  }
  return func;
}

export const PlasmicRecording = Object.assign(
  // Top-level PlasmicRecording renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pause: makeNodeComponent("pause"),
    xButton3: makeNodeComponent("xButton3"),

    // Metadata about props expected for PlasmicRecording
    internalVariantProps: PlasmicRecording__VariantProps,
    internalArgProps: PlasmicRecording__ArgProps
  }
);

export default PlasmicRecording;
/* prettier-ignore-end */
